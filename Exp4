from itertools import permutations

def solve():
    # The letters involved
    letters = ('S', 'E', 'N', 'D', 'M', 'O', 'R', 'Y')
    
    # Digits 0-9
    digits = range(10)
    
    # Try all possible assignments of digits to letters
    for perm in permutations(digits, len(letters)):
        mapping = dict(zip(letters, perm))
        
        # Leading digits cannot be zero
        if mapping['S'] == 0 or mapping['M'] == 0:
            continue
        
        # Construct numbers
        send = (
            1000 * mapping['S']
            + 100 * mapping['E']
            + 10 * mapping['N']
            + mapping['D']
        )
        
        more = (
            1000 * mapping['M']
            + 100 * mapping['O']
            + 10 * mapping['R']
            + mapping['E']
        )
        
        money = (
            10000 * mapping['M']
            + 1000 * mapping['O']
            + 100 * mapping['N']
            + 10 * mapping['E']
            + mapping['Y']
        )
        
        if send + more == money:
            print("Solution found!")
            for letter in letters:
                print(f"{letter} = {mapping[letter]}")
            print(f"{send} + {more} = {money}")
            return

    print("No solution found.")

if __name__ == "__main__":
    solve()
